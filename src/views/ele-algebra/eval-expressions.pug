extends ../layout

block content
  // Topic Header Section
  include ../components/topic-header
  // Introduction Section
  include ../components/intro
  // Prerequisite Section
  include ../components/pre-req
  // Contents Section
  include ../components/contents
  #understanding-expressions.section.my-section-margin
    .title.is-4
      | Understanding Expressions 
      a(style='opacity:0.4;')
        span.icon
          i.fa.fa-anchor
    .content
      p
        | In order to understand expressions, we have to break the expression down into its terms.
      p
        | A term is a group of constants (numbers) and variables (like \(x\))
        | combined together with various operators like \(\times\) and \(\div\).
      p
        | Terms are seperated by binary operators, \(+\) and \(-\).
    .content
      p
        | Here are a few examples of terms and non-terms.
      .columns
        .column.has-text-centered
          span.icon.my-green-icon
            i.fa.fa-check-circle
        for goodTerm in content.goodTerms
          .column.has-text-centered
            span #{goodTerm}
    hr
    .content
      .columns
        .column.has-text-centered
          span.icon.my-red-icon
            i.fa.fa-minus-circle
        for badTerm in content.badTerms
          .column.has-text-centered(*ngfor='let badTerm of content.badTerms')
            span #{badTerm}
  #example-expressions.section.my-section-margin
    .title.is-4 
      | Examples of Expressions
      a(href='#example-expressions', style='opacity:0.4;')
        span.icon
          i.fa.fa-anchor

    .content
      p Let's build an expression from the examples above.
      p All we have to do is combine the terms using \(+\) and/or \(-\)
    .content
      p #{content.expression1}
      p
        | Easy right ? Here are a few more examples of expressions.
      .columns
        for expr in content.expressions
          .column.has-text-centered #{expr}
  #evaluate-expressions.section.my-section-margin
    .title.is-4 Evaluating Expressions
    .content
      p
        | Now for the fun part. For completeness, we are going to evaluate two different kinds of expressions.
      p  Let's start with an expression without variables.
      p #{content.expression2}
      p
        | When evaluating an expression with no variables, we can simply evaluate by applying BEDMAS.
      p #{content.solveExpression2}
      br
      p Good stuff. Now, let's evaluate an expression with variables.
      p #{content.expression3}
      p
        | We have to perform an additional step at the start before we can evaluate, which is
        | to substitute the value given for the variable, in this case $3$ for $x$.
        | Then evaluate like a simple expression by applying BEDMAS.
      p #{content.solveExpression3}
      p
        | That's it. Now you know how to evaluate an expression. Practice these concepts in the Exercise section below.
  // Exercises Section
  include ../components/exercises
  // Resources Section
  include ../components/resources